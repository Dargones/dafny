counterexample_commandline.dfy(30,20): Error: a postcondition could not be proved on this return path
counterexample_commandline.dfy(18,22): Related location: this is the postcondition that could not be proved

Dafny program verifier finished with 1 verified, 1 error
Counterexample for first failing assertion: 
Temporary variables to describe counterexamples: 
ghost var loopGuard0 : bool := false;
counterexample_commandline.dfy(21,8): initial state:
assume exists boundVar0: char, boundVar1: char :: this is Patterns.Simple && this is Patterns.Simple? && this != null && s is seq<char> && |s| > 0 && 1 is int && 0 is int && '?' is char && this.p is seq<char> && |this.p| > 0 && s[0] is char && s[0] != '?' && s[0] != boundVar0 && s[0] != boundVar1 && boundVar0 is char && boundVar0 != boundVar1 && boundVar0 != '?' && boundVar0 != s[0] && boundVar1 is char && boundVar1 != boundVar0 && boundVar1 != '?' && boundVar1 != s[0] && 1 == |s| && 1 == |this.p| && '?' == this.p[0];
counterexample_commandline.dfy(22,22):
assume exists boundVar0: char, boundVar1: char :: this is Patterns.Simple && this is Patterns.Simple? && this != null && s is seq<char> && |s| > i && i is int && 1 is int && '?' is char && this.p is seq<char> && |this.p| > i && s[i] is char && s[i] != '?' && s[i] != boundVar0 && s[i] != boundVar1 && boundVar0 is char && boundVar0 != boundVar1 && boundVar0 != '?' && boundVar0 != s[i] && boundVar1 is char && boundVar1 != boundVar0 && boundVar1 != '?' && boundVar1 != s[i] && i == 0 && 1 == |s| && 1 == |this.p| && '?' == this.p[i];
counterexample_commandline.dfy(23,12): after some loop iterations:
loopGuard0 := exists boundVar0: char, boundVar1: char :: this is Patterns.Simple && this is Patterns.Simple? && this != null && s is seq<char> && |s| > i && i is int && 1 is int && '?' is char && this.p is seq<char> && |this.p| > i && s[i] is char && s[i] != '?' && s[i] != boundVar0 && s[i] != boundVar1 && boundVar0 is char && boundVar0 != boundVar1 && boundVar0 != '?' && boundVar0 != s[i] && boundVar1 is char && boundVar1 != boundVar0 && boundVar1 != '?' && boundVar1 != s[i] && i == 0 && 1 == |s| && 1 == |this.p| && '?' == this.p[i];
counterexample_commandline.dfy(30,32):
assume loopGuard0 ==> exists boundVar0: char, boundVar1: char :: this is Patterns.Simple && this is Patterns.Simple? && this != null && s is seq<char> && |s| > i && b is bool && i is int && 1 is int && '?' is char && this.p is seq<char> && |this.p| > i && s[i] is char && s[i] != '?' && s[i] != boundVar0 && s[i] != boundVar1 && boundVar0 is char && boundVar0 != boundVar1 && boundVar0 != '?' && boundVar0 != s[i] && boundVar1 is char && boundVar1 != boundVar0 && boundVar1 != '?' && boundVar1 != s[i] && b == false && i == 0 && 1 == |s| && 1 == |this.p| && '?' == this.p[i];
