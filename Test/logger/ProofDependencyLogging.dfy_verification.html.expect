<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html
        xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
    <link rel="stylesheet" href="./.resources/coverage.css" type="text/css"/>
    <title>ProofDependencyLogging.dfy, Verification coverage</title>
</head>
<body onload="window['PR_TAB_WIDTH']=4">
<div class="menu" id="menu">
    <a href="./index_verification.html">Index</a>
    
</div>
<h1>ProofDependencyLogging.dfy, Verification coverage</h1>

<pre class="source lang-java linenums">
<span class="none" id="line1-col1">// RUN: %baredafny verify --log-format:text --boogie -trackVerificationCoverage "%s" > "%t"
// RUN: %OutputCheck --file-to-check "%t" "%s"
// CHECK: Results for RedundantAssumeMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(177,12\)-\(177,16\): assume statement
// CHECK:       ProofDependencyLogging.dfy\(178,12\)-\(178,12\): assertion always holds
//
// CHECK: Results for ContradictoryAssumeMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(183,12\)-\(183,16\): assume statement
// CHECK:       ProofDependencyLogging.dfy\(184,12\)-\(184,16\): assume statement
//
// CHECK: Results for AssumeFalseMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(192,12\)-\(192,12\): assume statement
//
// CHECK: Results for ObviouslyContradictoryRequiresFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(198,12\)-\(198,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(199,12\)-\(199,16\): requires clause
//
// CHECK: Results for ObviouslyContradictoryRequiresMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(207,12\)-\(207,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(208,12\)-\(208,16\): requires clause
//
// CHECK: Results for ObviouslyRedundantRequiresFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(216,1\)-\(222,1\): function definition for ObviouslyRedundantRequiresFunc
// CHECK:       ProofDependencyLogging.dfy\(217,12\)-\(217,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(219,11\)-\(219,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(221,3\)-\(221,7\): function call result
// CHECK:       ProofDependencyLogging.dfy\(221,5\)-\(221,5\): value always satisfies the subset constraints of 'nat'
//
// CHECK: Results for ObviouslyRedundantRequiresMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(225,12\)-\(225,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(227,11\)-\(227,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(229,12\)-\(229,12\): value always satisfies the subset constraints of 'nat'
// CHECK:       ProofDependencyLogging.dfy\(229,3\)-\(229,15\): assignment \(or return\)
//
// CHECK: Results for ObviouslyUnnecessaryRequiresFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(237,21\)-\(237,21\): value always satisfies the subset constraints of 'nat'
// CHECK:       ProofDependencyLogging.dfy\(237,32\)-\(237,32\): value always satisfies the subset constraints of 'nat'
//
// CHECK: Results for ObviouslyUnnecessaryRequiresMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(244,25\)-\(244,25\): value always satisfies the subset constraints of 'nat'
// CHECK:       ProofDependencyLogging.dfy\(244,48\)-\(244,48\): value always satisfies the subset constraints of 'nat'
//
// CHECK: Results for ObviouslyUnconstrainedCodeFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(248,1\)-\(256,1\): function definition for ObviouslyUnconstrainedCodeFunc
// CHECK:       ProofDependencyLogging.dfy\(249,12\)-\(249,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(250,11\)-\(250,17\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(252,12\)-\(252,16\): let expression binding RHS well-formed
// CHECK:       ProofDependencyLogging.dfy\(252,7\)-\(252,7\): let expression binding
// CHECK:       ProofDependencyLogging.dfy\(254,3\)-\(254,3\): let expression result
//
// CHECK: Results for ObviouslyUnconstrainedCodeMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(259,12\)-\(259,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(260,11\)-\(260,17\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(262,9\)-\(262,17\): assignment \(or return\)
// CHECK:       ProofDependencyLogging.dfy\(264,3\)-\(266,8\): assignment \(or return\)
//
// CHECK: Results for PartiallyRedundantRequiresFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(270,1\)-\(275,1\): function definition for PartiallyRedundantRequiresFunc
// CHECK:       ProofDependencyLogging.dfy\(271,23\)-\(271,27\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(272,11\)-\(272,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(274,3\)-\(274,7\): function call result
// CHECK:       ProofDependencyLogging.dfy\(274,5\)-\(274,5\): value always satisfies the subset constraints of 'nat'
//
// CHECK: Results for PartiallyUnnecessaryRequiresFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(279,22\)-\(279,26\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(282,21\)-\(282,21\): value always satisfies the subset constraints of 'nat'
// CHECK:       ProofDependencyLogging.dfy\(282,32\)-\(282,32\): value always satisfies the subset constraints of 'nat'
//
// CHECK: Results for MultiPartRedundantRequiresFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(288,1\)-\(295,1\): function definition for MultiPartRedundantRequiresFunc
// CHECK:       ProofDependencyLogging.dfy\(291,12\)-\(291,17\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(292,11\)-\(292,16\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(294,3\)-\(294,3\): function call result
//
// CHECK: Results for MultiPartRedundantRequiresMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(300,12\)-\(300,17\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(301,11\)-\(301,16\): ensures clause
//
// CHECK: Results for MultiPartContradictoryRequiresFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(309,1\)-\(316,1\): function definition for MultiPartContradictoryRequiresFunc
// CHECK:       ProofDependencyLogging.dfy\(310,12\)-\(310,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(311,12\)-\(311,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(313,11\)-\(313,16\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(315,3\)-\(315,3\): function call result
//
// CHECK: Results for MultiPartContradictoryRequiresMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(319,12\)-\(319,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(320,12\)-\(320,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(322,11\)-\(322,16\): ensures clause
//
// CHECK: Results for CallContradictoryFunctionFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(336,1\)-\(342,1\): function definition for CallContradictoryFunctionFunc
// CHECK:       ProofDependencyLogging.dfy\(337,12\)-\(337,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(338,11\)-\(338,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(341,3\)-\(341,3\): function precondition satisfied
// CHECK:       ProofDependencyLogging.dfy\(341,3\)-\(341,39\): function call result
//
// CHECK: Results for CallContradictoryMethodMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(345,12\)-\(345,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(348,9\)-\(348,47\): ensures clause at ProofDependencyLogging.dfy\(333,12\)-\(333,25\) from call
// CHECK:       ProofDependencyLogging.dfy\(348,9\)-\(348,47\): ensures clause at ProofDependencyLogging.dfy\(333,12\)-\(333,25\) from call
// CHECK:       ProofDependencyLogging.dfy\(348,9\)-\(348,47\): requires clause at ProofDependencyLogging.dfy\(332,12\)-\(332,16\) from call
//
// CHECK: Results for FalseAntecedentRequiresClauseMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(357,3\)-\(357,15\): assignment \(or return\)
//
// CHECK: Results for FalseAntecedentAssertStatementMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(362,9\)-\(362,15\): assignment \(or return\)
// CHECK:       ProofDependencyLogging.dfy\(363,20\)-\(363,20\): assertion always holds
//
// CHECK: Results for FalseAntecedentEnsuresClauseMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(368,11\)-\(368,25\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(370,3\)-\(370,13\): assignment \(or return\)
//
// CHECK: Results for ObviouslyUnreachableIfExpressionBranchFunc \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(373,1\)-\(380,1\): function definition for ObviouslyUnreachableIfExpressionBranchFunc
// CHECK:       ProofDependencyLogging.dfy\(374,12\)-\(374,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(375,11\)-\(375,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(379,8\)-\(379,12\): if expression else branch
//
// CHECK: Results for ObviouslyUnreachableIfStatementBranchMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(383,12\)-\(383,16\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(384,11\)-\(384,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(389,5\)-\(389,17\): assignment \(or return\)
//
// CHECK: Results for ObviouslyUnreachableMatchExpressionCaseFunction \(well-formedness\)
//
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(395,1\)-\(403,1\): function definition for ObviouslyUnreachableMatchExpressionCaseFunction
// CHECK:       ProofDependencyLogging.dfy\(396,12\)-\(396,17\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(397,11\)-\(397,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(401,15\)-\(401,15\): match expression branch result
//
// CHECK: Results for ObviouslyUnreachableMatchStatementCaseMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(406,12\)-\(406,17\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(407,11\)-\(407,15\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(411,15\)-\(411,23\): assignment \(or return\)
//
// CHECK: Results for ObviouslyUnreachableReturnStatementMethod \(correctness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(416,12\)-\(416,17\): requires clause
// CHECK:       ProofDependencyLogging.dfy\(417,13\)-\(417,17\): ensures clause
// CHECK:       ProofDependencyLogging.dfy\(420,7\)-\(420,15\): assignment \(or return\)




method RedundantAssumeMethod(n: int)
{
    // either one or the other assumption shouldn't be covered
    assume </span><span class="nc" id="line176-col12">n > 4</span><span class="none" id="line176-col17">;
    assume </span><span class="fc" id="line177-col12">n > 3</span><span class="none" id="line177-col17">;
    assert n </span><span class="fc" id="line178-col14">></span><span class="none" id="line178-col15"> 1;
}

method ContradictoryAssumeMethod(n: int)
{
    assume </span><span class="fc" id="line183-col12">n > 0</span><span class="none" id="line183-col17">;
    assume </span><span class="fc" id="line184-col12">n < 0</span><span class="none" id="line184-col17">;
    assume </span><span class="nc" id="line185-col12">n == 5</span><span class="none" id="line185-col18">; // shouldn't be covered
    assert n </span><span class="nc" id="line186-col14"><</span><span class="none" id="line186-col15"> 10; // shouldn't be covered
}

method AssumeFalseMethod(n: int)
{
    assume </span><span class="nc" id="line191-col12">n == 1</span><span class="none" id="line191-col18">5; // shouldn't be covered
    assume </span><span class="fc" id="line192-col12">f</span><span class="none" id="line192-col13">alse;
    assert n </span><span class="nc" id="line193-col14"><</span><span class="none" id="line193-col15"> 10; // shouldn't be covered
}

// Obvious contradiction in requires clauses.
function ObviouslyContradictoryRequiresFunc(x: nat): (r: nat)
  requires </span><span class="fc" id="line198-col12">x > 1</span><span class="none" id="line198-col17">0
  requires </span><span class="fc" id="line199-col12">x < 1</span><span class="none" id="line199-col17">0
  ensures </span><span class="nc" id="line200-col11">r < x</span><span class="none" id="line200-col16"> // only provable vacuously 
{
  assert x </span><span class="nc" id="line202-col12">=</span><span class="none" id="line202-col13">= 10; // contradicts both requires clauses
  </span><span class="nc" id="line203-col3">x - 1</span><span class="none" id="line203-col8"> // not necessarily a valid nat
}

method ObviouslyContradictoryRequiresMethod(x: nat) returns (r: nat)
  requires </span><span class="pc" id="line207-col12">x > 1</span><span class="none" id="line207-col17">0
  requires </span><span class="pc" id="line208-col12">x < 1</span><span class="none" id="line208-col17">0
  ensures </span><span class="nc" id="line209-col11">r < x</span><span class="none" id="line209-col16"> // only provable vacuously
{
  assert x </span><span class="nc" id="line211-col12">=</span><span class="none" id="line211-col13">= 10; // contradicts both requires clauses
  </span><span class="nc" id="line212-col3">return x - 1;</span><span class="none" id="line212-col16"> // not necessarily a valid nat
</span><span class="nc" id="line213-col1">}

</span><span class="none" id="line215-col1">// Obvious redundancy in requires clauses.
function ObviouslyRedundantRequiresFunc(x: nat): (r: nat)
  requires </span><span class="fc" id="line217-col12">x < 1</span><span class="none" id="line217-col17">0
  requires </span><span class="nc" id="line218-col12">x < 1</span><span class="none" id="line218-col17">00 // implied by previous requires clause
  ensures </span><span class="pc" id="line219-col11">r < 1</span><span class="none" id="line219-col16">1 // should cause body and first requires clause to be covered
{
  </span><span class="fc" id="line221-col3">x + 1
</span><span class="none" id="line222-col1">}

method ObviouslyRedundantRequiresMethod(x: nat) returns (r: nat)
  requires </span><span class="pc" id="line225-col12">x < 1</span><span class="none" id="line225-col17">0
  requires </span><span class="nc" id="line226-col12">x < 1</span><span class="none" id="line226-col17">00 // implied by previous requires clause
  ensures </span><span class="pc" id="line227-col11">r < 1</span><span class="none" id="line227-col16">1 // should cause body and first requires clause to be covered
{
  </span><span class="fc" id="line229-col3">return x + 1;
</span><span class="nc" id="line230-col1">}

</span><span class="none" id="line232-col1">// Obviously unnecessary requires clauses.
function ObviouslyUnnecessaryRequiresFunc(x: nat): (r: nat)
  requires </span><span class="nc" id="line234-col12">x < 1</span><span class="none" id="line234-col17">0 // not required for the proof
{
  // cause at least a little proof work to be necessary, for nat bounds
  if (x > 5) then </span><span class="nc" id="line237-col19">x </span><span class="pc" id="line237-col21">+</span><span class="nc" id="line237-col22"> 2</span><span class="none" id="line237-col24"> else </span><span class="nc" id="line237-col30">x </span><span class="pc" id="line237-col32">+</span><span class="nc" id="line237-col33"> 1
</span><span class="none" id="line238-col1">}

method ObviouslyUnnecessaryRequiresMethod(x: nat) returns (r: nat)
  requires </span><span class="nc" id="line241-col12">x < 1</span><span class="none" id="line241-col17">0 // not required for the proof
{
  // cause at least a little proof work to be necessary, for nat bounds
  if (x > 5) { </span><span class="pc" id="line244-col16">r</span><span class="nc" id="line244-col17">eturn x </span><span class="pc" id="line244-col25">+</span><span class="nc" id="line244-col26"> 2;</span><span class="none" id="line244-col29"> } else { </span><span class="pc" id="line244-col39">r</span><span class="nc" id="line244-col40">eturn x </span><span class="pc" id="line244-col48">+</span><span class="nc" id="line244-col49"> 1;</span><span class="none" id="line244-col52"> }
</span><span class="nc" id="line245-col1">}

</span><span class="none" id="line247-col1">// Code obviously not constrained by ensures clause.
function ObviouslyUnconstrainedCodeFunc(x: int): (r: (int, int))
  requires </span><span class="fc" id="line249-col12">x > 1</span><span class="none" id="line249-col17">0
  ensures </span><span class="pc" id="line250-col11">r.0 > 1</span><span class="none" id="line250-col18">0
{
  var </span><span class="fc" id="line252-col7">a</span><span class="none" id="line252-col8"> := </span><span class="fc" id="line252-col12">x + 1</span><span class="none" id="line252-col17">; // constrained by ensures clause
  var </span><span class="nc" id="line253-col7">b</span><span class="none" id="line253-col8"> := </span><span class="nc" id="line253-col12">x - 1</span><span class="none" id="line253-col17">; // not constrained by ensures clause 
  </span><span class="fc" id="line254-col3">(</span><span class="none" id="line254-col4">a,
   b)
}

method ObviouslyUnconstrainedCodeMethod(x: int) returns (r: (int, int))
  requires </span><span class="pc" id="line259-col12">x > 1</span><span class="none" id="line259-col17">0
  ensures </span><span class="pc" id="line260-col11">r.0 > 1</span><span class="none" id="line260-col18">0
{
  var a </span><span class="fc" id="line262-col9">:= x + 1;</span><span class="none" id="line262-col18"> // constrained by ensures clause
  var b </span><span class="nc" id="line263-col9">:= x - 1;</span><span class="none" id="line263-col18"> // not constrained by ensures clause
  </span><span class="fc" id="line264-col3">return
</span><span class="none" id="line265-col1">    (a,
     b);
</span><span class="nc" id="line267-col1">}

</span><span class="none" id="line269-col1">// Partial redundancy in requires clauses.
function PartiallyRedundantRequiresFunc(x: nat): (r: nat)
  requires </span><span class="nc" id="line271-col12">x < 1</span><span class="none" id="line271-col17">00 && </span><span class="fc" id="line271-col23">x < 1</span><span class="none" id="line271-col28">0 // LHS implied by RHS
  ensures </span><span class="pc" id="line272-col11">r < 1</span><span class="none" id="line272-col16">1 // should cause body and RHS clause to be covered
{
  </span><span class="fc" id="line274-col3">x + 1
</span><span class="none" id="line275-col1">}

// Partly unnecessary requires clause.
function PartiallyUnnecessaryRequiresFunc(x: int): (r: nat)
  requires </span><span class="nc" id="line279-col12">x < 1</span><span class="none" id="line279-col17">0 && </span><span class="fc" id="line279-col22">x > 0</span><span class="none" id="line279-col27"> // RHS required for proof, but not LHS
{
  // cause at least a little proof work to be necessary, for nat bounds
  if (x > 5) then </span><span class="nc" id="line282-col19">x </span><span class="pc" id="line282-col21">-</span><span class="nc" id="line282-col22"> 1</span><span class="none" id="line282-col24"> else </span><span class="nc" id="line282-col30">x </span><span class="pc" id="line282-col32">+</span><span class="nc" id="line282-col33"> 1
</span><span class="none" id="line283-col1">}


// Redundancy of one requires clause due to at least two others, with at least
// one of the three being partly in a separately-defined function.
function MultiPartRedundantRequiresFunc(x: int): (r: int)
  requires </span><span class="nc" id="line289-col12">x > 1</span><span class="none" id="line289-col17">0
  requires </span><span class="nc" id="line290-col12">x < 1</span><span class="none" id="line290-col17">2
  requires </span><span class="fc" id="line291-col12">x == 1</span><span class="none" id="line291-col18">1 // implied by the previous two, but neither individually
  ensures </span><span class="pc" id="line292-col11">r == 1</span><span class="none" id="line292-col17">1
{
  </span><span class="fc" id="line294-col3">x
</span><span class="none" id="line295-col1">}

method MultiPartRedundantRequiresMethod(x: int) returns (r: int)
  requires </span><span class="nc" id="line298-col12">x > 1</span><span class="none" id="line298-col17">0
  requires </span><span class="nc" id="line299-col12">x < 1</span><span class="none" id="line299-col17">2
  requires </span><span class="pc" id="line300-col12">x == 1</span><span class="none" id="line300-col18">1 // implied by the previous two, but neither individually
  ensures </span><span class="pc" id="line301-col11">r == 1</span><span class="none" id="line301-col17">1
{
  </span><span class="pc" id="line303-col3">r</span><span class="nc" id="line303-col4">eturn x;
}

</span><span class="none" id="line306-col1">// Contradiction between three different requires clauses, with at least one of
// the three being partly in a separately-defined function (function and
// method).
function MultiPartContradictoryRequiresFunc(x: int, y: int): (r: int)
  requires </span><span class="fc" id="line310-col12">x > 1</span><span class="none" id="line310-col17">0
  requires </span><span class="fc" id="line311-col12">x < 1</span><span class="none" id="line311-col17">2
  requires </span><span class="nc" id="line312-col12">y != 1</span><span class="none" id="line312-col18">1 // contradicts the previous two
  ensures </span><span class="pc" id="line313-col11">r == 1</span><span class="none" id="line313-col17">1 // provable from first two preconditions, but shouldn't be covered
{
  </span><span class="fc" id="line315-col3">x
</span><span class="none" id="line316-col1">}

method MultiPartContradictoryRequiresMethod(x: int, y: int) returns (r: int)
  requires </span><span class="pc" id="line319-col12">x > 1</span><span class="none" id="line319-col17">0
  requires </span><span class="pc" id="line320-col12">x < 1</span><span class="none" id="line320-col17">2
  requires </span><span class="nc" id="line321-col12">y != 1</span><span class="none" id="line321-col18">1 // contradicts the previous two
  ensures </span><span class="pc" id="line322-col11">r == 1</span><span class="none" id="line322-col17">1 // provable from first two preconditions, but shouldn't be covered
{
  </span><span class="pc" id="line324-col3">r</span><span class="nc" id="line324-col4">eturn x;
}

</span><span class="none" id="line327-col1">function ContradictoryEnsuresClauseFunc(x: int): (r: int)
  requires </span><span class="nc" id="line328-col12">x > 1
</span><span class="none" id="line329-col1">  ensures  </span><span class="nc" id="line329-col12">r > x && r < 0

</span><span class="none" id="line331-col1">method ContradictoryEnsuresClauseMethod(x: int) returns (r: int)
  requires </span><span class="nc" id="line332-col12">x > 1
</span><span class="none" id="line333-col1">  ensures  </span><span class="nc" id="line333-col12">r > x && r < 0

</span><span class="none" id="line335-col1">// Call function that has contradictory ensures clauses.
function CallContradictoryFunctionFunc(x: int): (r: int)
  requires </span><span class="fc" id="line337-col12">x > 1
</span><span class="none" id="line338-col1">  ensures </span><span class="pc" id="line338-col11">r < 0
</span><span class="none" id="line339-col1">{
  // TODO: Dafny doesn't generate sufficient Boogie code to make the contradiction detectable
  </span><span class="fc" id="line341-col3">ContradictoryEnsuresClauseFunc(x) - 1
</span><span class="none" id="line342-col1">}

method CallContradictoryMethodMethod(x: int) returns (r: int)
  requires </span><span class="pc" id="line345-col12">x > 1
</span><span class="none" id="line346-col1">  ensures </span><span class="nc" id="line346-col11">r < 0
</span><span class="none" id="line347-col1">{
  var y </span><span class="nc" id="line348-col9">:= ContradictoryEnsuresClauseMethod(x);
</span><span class="none" id="line349-col1">  </span><span class="nc" id="line349-col3">return y - 1;
}

</span><span class="none" id="line352-col1">// False antecedent requires clause
method FalseAntecedentRequiresClauseMethod(x: int) returns (r: int)
  requires </span><span class="nc" id="line354-col12">x*x < 0 ==> x == x + 1
</span><span class="none" id="line355-col1">  ensures </span><span class="pc" id="line355-col11">r > x
</span><span class="none" id="line356-col1">{
  </span><span class="fc" id="line357-col3">return x + 1;
</span><span class="nc" id="line358-col1">}

</span><span class="none" id="line360-col1">// False antecedent assert statement.
method FalseAntecedentAssertStatementMethod(x: int) {
  var y </span><span class="fc" id="line362-col9">:= x*x;
</span><span class="none" id="line363-col1">  assert </span><span class="nc" id="line363-col10">y < 0 ==> x </span><span class="pc" id="line363-col22"><</span><span class="nc" id="line363-col23"> 0</span><span class="none" id="line363-col25">;
}

// False antecedent ensures clause.
method FalseAntecedentEnsuresClauseMethod(x: int) returns (r: int)
  ensures </span><span class="pc" id="line368-col11">r < 0 ==> x < 0
</span><span class="none" id="line369-col1">{
  </span><span class="fc" id="line370-col3">return x*x;
</span><span class="nc" id="line371-col1">}

</span><span class="none" id="line373-col1">function ObviouslyUnreachableIfExpressionBranchFunc(x: int): (r:int)
  requires </span><span class="fc" id="line374-col12">x > 0
</span><span class="none" id="line375-col1">  ensures </span><span class="pc" id="line375-col11">r > 0
</span><span class="none" id="line376-col1">{
  if x < 0
  then </span><span class="nc" id="line378-col8">x - 1</span><span class="none" id="line378-col13"> // unreachable
  else </span><span class="fc" id="line379-col8">x + 1
</span><span class="none" id="line380-col1">}

method ObviouslyUnreachableIfStatementBranchMethod(x: int) returns (r:int)
  requires </span><span class="pc" id="line383-col12">x > 0
</span><span class="none" id="line384-col1">  ensures </span><span class="pc" id="line384-col11">r > 0
</span><span class="none" id="line385-col1">{
  if x < 0 {
    </span><span class="nc" id="line387-col5">return x - 1;</span><span class="none" id="line387-col18"> // unreachable
  } else {
    </span><span class="fc" id="line389-col5">return x + 1;
</span><span class="none" id="line390-col1">  }
</span><span class="nc" id="line391-col1">}

</span><span class="none" id="line393-col1">datatype T = A | B

function ObviouslyUnreachableMatchExpressionCaseFunction(t: T): (r:int)
  requires </span><span class="fc" id="line396-col12">t != A
</span><span class="none" id="line397-col1">  ensures </span><span class="pc" id="line397-col11">r > 1</span><span class="none" id="line397-col16"> // alt: r > 0
{
  match t {
    case A => </span><span class="nc" id="line400-col15">1</span><span class="none" id="line400-col16"> // unreachable
    case B => </span><span class="fc" id="line401-col15">2
</span><span class="none" id="line402-col1">  }
}

method ObviouslyUnreachableMatchStatementCaseMethod(t: T) returns (r:int)
  requires </span><span class="pc" id="line406-col12">t != A
</span><span class="none" id="line407-col1">  ensures </span><span class="pc" id="line407-col11">r > 1</span><span class="none" id="line407-col16"> // alt: r > 0
{
  match t {
    case A => </span><span class="nc" id="line410-col15">return 1;</span><span class="none" id="line410-col24"> // unreachable
    case B => </span><span class="fc" id="line411-col15">return 2;
</span><span class="none" id="line412-col1">  }
</span><span class="nc" id="line413-col1">}

</span><span class="none" id="line415-col1">method ObviouslyUnreachableReturnStatementMethod(t: T) returns (r:int)
  requires </span><span class="pc" id="line416-col12">t != A
</span><span class="none" id="line417-col1">    ensures </span><span class="pc" id="line417-col13">r > 1</span><span class="none" id="line417-col18"> // alt: r > 0
  {
    if !t.A? {
      </span><span class="fc" id="line420-col7">return 2;
</span><span class="none" id="line421-col1">    }

    </span><span class="nc" id="line423-col5">return 1;</span><span class="none" id="line423-col14"> // unreachable
  </span><span class="nc" id="line424-col3">}

</span><span class="none" id="line426-col1">method CalcStatementWithSideConditions(x: int) {
  calc == {
    </span><span class="nc" id="line428-col5">x </span><span class="pc" id="line428-col7">/</span><span class="nc" id="line428-col8"> 2;
    (x*2) </span><span class="pc" id="line429-col11">/</span><span class="nc" id="line429-col12"> 4</span><span class="none" id="line429-col14">;
  }
}

method DontWarnAboutVacuousAssertFalse(x: int) {
  assume </span><span class="fc" id="line434-col10">x == x + 1</span><span class="none" id="line434-col20">;
  assert </span><span class="nc" id="line435-col10">f</span><span class="none" id="line435-col11">alse;
}

// CHECK: Results for GetX \(well-formedness\)
// CHECK:     Proof dependencies:
// CHECK:       ProofDependencyLogging.dfy\(449,5\)-\(449,5\): target object is never null

class C {
  var x: int
}

function GetX(c: C): int
  reads c
{
  </span><span class="nc" id="line449-col3">c.</span><span class="pc" id="line449-col5">x
</span><span class="none" id="line450-col1">}

method DontWarnAboutUnusedAssumeTrue(x: int) {
  assume </span><span class="nc" id="line453-col10">t</span><span class="none" id="line453-col11">rue;
  assert 1 + x </span><span class="fc" id="line454-col16">=</span><span class="none" id="line454-col17">= x + 1;
}

</span></pre>
<div class="footer">
    <span class="right">
        Created with 
        <a href="https://github.com/dafny-lang/dafny">Dafny</a>
    </span>
</div>
</body>
</html>